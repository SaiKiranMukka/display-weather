{"version":3,"sources":["components/weather.js","components/icon.js","components/forecast.js","App.js","reportWebVitals.js","index.js"],"names":["refresh","window","location","reload","WeatherCard","weatherData","className","name","Button","icon","onClick","moment","format","weather","description","main","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","Icon","props","url","process","value","src","alt","Forecast","results","forecastData","map","data","index","dt_txt","Math","round","List","aria-label","App","useState","latitude","setLatitude","longitude","setLongitude","setWeatherData","forecast","setForecast","error","setError","handleResponse","response","ok","json","Error","useEffect","lat","long","navigator","geolocation","getCurrentPosition","position","coords","fetch","then","res","catch","err","message","Object","entries","length","list","filter","match","getForecast","Dimmer","active","Loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1748f5a.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/styles.css';\nimport moment from 'moment';\nimport { Button } from 'semantic-ui-react';\n\nconst refresh = () => {\n    window.location.reload();\n}\nconst WeatherCard = ({weatherData}) => {\n    return <div className=\"main\">\n\n        <div className=\"top\">\n            <p className=\"header\">{weatherData.name}</p>\n            \n            <Button className=\"button\" icon=\"refresh\" onClick={refresh} />\n        </div>\n\n        <div className=\"flex\">\n            <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\n            <p className=\"description\">\n                {weatherData.weather[0].description}\n                \n            </p>\n        </div>\n\n        <div className=\"flex\">\n            <p className=\"temp\">Temperature: {weatherData.main.temp} &deg;C</p>\n            <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\n        </div>\n\n        <div className=\"flex\">\n            <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\n            <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\n        </div>\n\n    </div>\n}\n\nexport default WeatherCard;","import React from 'react';\nconst Icon = (props) => {\n    const url = `${process.env.REACT_APP_ICON_URL}/${props.value}.png`;\n    return (\n        <img src={url} alt='weather-icon'/>\n    );\n}\n\nexport default Icon;","import React from \"react\";\nimport { List } from \"@material-ui/core\";\nimport moment from 'moment';\nimport '../styles/styles.css';\nimport Icon from './icon';\nexport default function Forecast(props) {\n\n  const { forecastData } = props;\n\n  const results = forecastData.map((data, index) => {\n\n    return (\n      <div key={index} className=\"forecast\">\n        <div className=\"flex-forecast\">\n          <p>{moment(data.dt_txt).format(\"dddd\")}</p>\n        \n          <p>\n            {data.weather[0].description}\n          </p>\n\n          <p>\n            {Math.round(data.main.temp)}&deg;C\n            <Icon value={data.weather[0].icon}></Icon>\n          </p>\n          \n        </div>\n      </div>\n    )\n  })\n  \n  return(\n    <div>\n      <List aria-label=\"forecast data\">{results}</List>\n    </div>\n  );\n  \n}","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Weather from './components/weather';\nimport { Dimmer, Loader } from 'semantic-ui-react';\nimport Forecast from './components/forecast';\n\nfunction App() {\n\n  const [latitude, setLatitude] = useState([]);\n  const [longitude, setLongitude] = useState([]);\n  const [weatherData, setWeatherData] = useState([]);\n  const [forecast, setForecast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    \n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n\n    if (typeof latitude === \"number\" && typeof longitude === \"number\") {\n\n      getWeather(latitude, longitude).then(weather => {\n        setWeatherData(weather);\n        setError(null);\n      }).catch(err => {\n        setError(err.message);\n      });\n\n      getForecast(latitude, longitude).then(forecast => {\n        setForecast(forecast);\n        setError(null);\n      }).catch(err => {\n        setError(err.message);\n      });\n    }\n\n    }, [latitude, longitude, error]);\n\n  function handleResponse(response) {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error(\"Please Enable your Location in your browser!\");\n    }\n  }\n  function getWeather(lat, long) {\n    return  fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n    .then(res => handleResponse(res));\n  }\n\n  function getForecast(lat, long) {\n    return fetch(\n      `${process.env.REACT_APP_API_URL}/forecast/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\n    )\n      .then(res => handleResponse(res))\n      .then(forecastData => {\n        if (Object.entries(forecastData).length) {\n          return forecastData.list\n            .filter(forecast => forecast.dt_txt.match(/09:00:00/))\n        }\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      {( typeof weatherData.main != 'undefined') ? (\n        <div>\n        <Weather weatherData={weatherData}/>\n        <Forecast forecastData={forecast} />\n        </div>\n      ): (\n        <div>\n          <Dimmer active>\n            <Loader>Loading...</Loader>\n          </Dimmer>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}